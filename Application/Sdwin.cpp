/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.26                          *
*        Compiled Aug 18 2014, 17:12:05                              *
*        (c) 2014 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

	#include <RTL.h>
	#include <stdio.h>
	#include <string.h>
	#include <stdint.h>
	#include "..\FS\FS.h"
#include "DIALOG.h"
#include "MESSAGEBOX.h"


#ifndef _MAX_PATH
  #define _MAX_PATH 256
#else
  #if (_MAX_PATH > 256)
    #undef  _MAX_PATH
    #define _MAX_PATH 256
  #endif
#endif

#ifndef _MAX_EXT
  #define _MAX_EXT  256
#endif


WM_HWIN CreateEditor(char* str);

/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_WINDOW_0    (GUI_ID_USER + 0x03)


// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/


	static FINFO info;

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "Sdwin", ID_WINDOW_0, 0, 0, 320, 240, 0, 0x0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _GetExt
*/
static void _GetExt(char * pFile, char * pExt) {
  int Len;
  int i;
  int j;

  //
  // Search beginning of extension
  //
  Len = strlen(pFile);
	Len = strlen(pFile);
  for (i = Len; i > 0; i--) {
    if (*(pFile + i) == '.') {
      *(pFile + i) = '\0';     // Cut extension from filename
      break;
    }
  }
  //
  // Copy extension
  //
  j = 0;
  while (*(pFile + ++i) != '\0') {
    *(pExt + j) = *(pFile + i);
    j++;
  }
  *(pExt + j) = '\0';          // Set end of string
}

/*********************************************************************
*
*       _GetData
*/
static int _GetData(CHOOSEFILE_INFO * pInfo) {


  static char         acAttrib[10]         = { 0 };
  char                c;
  int                 i;
  int                 r;

	static char Addr[256];
	
  switch (pInfo->Cmd) {
  case CHOOSEFILE_FINDFIRST:
	sprintf(Addr,"%s*.*",pInfo->pRoot);
		info.fileID=0;
		r =ffind(Addr,&info);
  //  r = FS_FindFirstFile(&FindData, pInfo->pRoot, acFile, sizeof(acFile));
    break;
  case CHOOSEFILE_FINDNEXT:
		r =ffind(Addr,&info);
   // r = FS_FindNextFile(&FindData) ^ 1;
    break;
  }
  if (r == 0) {
   /* pInfo->Flags = (info.attrib & _aAttrib[3].Mask) ? CHOOSEFILE_FLAG_DIRECTORY : 0;
    for (i = 0; i < GUI_COUNTOF(_aAttrib); i++) {
      if (info.attrib & _aAttrib[i].Mask) {
        c = _aAttrib[i].c;
      } else {
        c = '-';
      }
      acAttrib[i] = c;
    }*/
		
		//strcpy(acFile,(char *)info.name);
  //  _GetExt(acFile, acExt);
    pInfo->pAttrib = acAttrib;
    pInfo->pName   = (char*)info.name;
    pInfo->pExt    = (char*)info.name;
    pInfo->SizeL   = info.size;
    pInfo->SizeH   = 0;
  }
  return r;

}

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
	
	CHOOSEFILE_INFO   Info                = { 0 };
  WM_HWIN           hWin;
  uint16_t               xSize;
  uint16_t               ySize;
  uint8_t               r;
  char              acDir[]    = "M:";
  char const      * apDrives[1]         = { acDir };
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
	if(finit ("M0")==0){
  WM_SetCreateFlags(WM_CF_MEMDEV);
  WM_SetDesktopColor(GUI_WHITE);
  //
  // Set defaults for FRAMEWIN widget
  //
  FRAMEWIN_SetDefaultFont(GUI_FONT_20_ASCII);
  FRAMEWIN_SetDefaultTextAlign(GUI_TA_HCENTER);
  //
  // Get display size and initialize pointers to search mask and callback routine
  //
  xSize = LCD_GetXSize();
  ySize = LCD_GetYSize();
  Info.pfGetData = _GetData;
  Info.pMask     = "*";
	CHOOSEFILE_SetTopMode(1);
	
	 _start:
    
    hWin = CHOOSEFILE_Create(WM_HBKWIN, 0, 0, xSize, ySize, apDrives, GUI_COUNTOF(apDrives), 0, "File", 0, &Info);


    r = GUI_ExecCreatedDialog(hWin);
    if (r == 0) {
      hWin = MESSAGEBOX_Create(Info.pRoot, "File:", 0);
		//  if 
      GUI_Delay(2000);
      WM_DeleteWindow(hWin);
			goto _start;
    } else {

    }
	}
	break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateSdwin
*/
WM_HWIN CreateSdwin(void);
WM_HWIN CreateSdwin(void) {
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);

  return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
