/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.26                          *
*        Compiled Aug 18 2014, 17:12:05                              *
*        (c) 2014 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END



#include "DIALOG.h"
#include "..\AF_UART_LIB\UART.h"
#include <stdint.h>

/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_FRAMEWIN_0    (GUI_ID_USER + 0x0E)
#define ID_TEXT_0    (GUI_ID_USER + 0x10)
#define ID_TEXT_1    (GUI_ID_USER + 0x11)
#define ID_DROPDOWN_0    (GUI_ID_USER + 0x12)
#define ID_SPINBOX_0    (GUI_ID_USER + 0x13)
#define ID_BUTTON_0    (GUI_ID_USER + 0x14)
#define ID_BUTTON_1    (GUI_ID_USER + 0x15)
#define ID_IMAGE_0    (GUI_ID_USER + 0x16)
#define ID_TEXT_2    (GUI_ID_USER + 0x1A)
#define ID_BUTTON_2    (GUI_ID_USER + 0x1B)
#define ID_EDIT_0    (GUI_ID_USER + 0x1C)
#define ID_MULTIEDIT_0    (GUI_ID_USER + 0x1D)
#define ID_BUTTON_3    (GUI_ID_USER + 0x1F)
#define ID_BUTTON_4    (GUI_ID_USER + 0x20)

#define ID_IMAGE_0_IMAGE_0    0x00

// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

static uint8_t uartNum;
static uint32_t buadrate;
static bool pinit=false; // previos init
static	UART iuart(0,9600);
static char stringS[100];
static char stringR[100];

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { FRAMEWIN_CreateIndirect, "UART", ID_FRAMEWIN_0, 12, 4, 299, 244, 0, 0x0, 0 },
  { TEXT_CreateIndirect, "Number of UART :", ID_TEXT_0, 9, 35, 88, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "Text", ID_TEXT_1, 11, 58, 80, 20, 0, 0x64, 0 },
  { DROPDOWN_CreateIndirect, "Dropdown", ID_DROPDOWN_0, 102, 34, 74, 19, 0, 0x0, 0 },
  { SPINBOX_CreateIndirect, "Spinbox", ID_SPINBOX_0, 102, 59, 80, 20, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Connect", ID_BUTTON_0, 8, 89, 80, 20, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Disconnect", ID_BUTTON_1, 94, 89, 80, 20, 0, 0x0, 0 },
  { IMAGE_CreateIndirect, "Image", ID_IMAGE_0, 196, 26, 86, 83, 0, 0, 0 },
  { TEXT_CreateIndirect, "Text", ID_TEXT_2, 79, 6, 114, 16, 0, 0x64, 0 },
	{ BUTTON_CreateIndirect, "Send Hello World!", ID_BUTTON_2, 9, 118, 165, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit", ID_EDIT_0, 15, 145, 177, 20, 0, 0x64, 0 },
  { MULTIEDIT_CreateIndirect, "Multiedit", ID_MULTIEDIT_0, 15, 168, 265, 46, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "Send", ID_BUTTON_3, 199, 145, 80, 20, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "receive", ID_BUTTON_4, 199, 119, 80, 20, 0, 0x0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  const void * pData;
  WM_HWIN      hItem;
  U32          FileSize;
  int          NCode;
  int          Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
    //
    // Initialization of 'UART'
    //
    hItem = pMsg->hWin;
    FRAMEWIN_SetTitleHeight(hItem, 14);
    //
    // Initialization of 'Number of UART :'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
    TEXT_SetText(hItem, "Number of UART :");
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
    TEXT_SetText(hItem, "Baud Rate : ");
    //
    // Initialization of 'Dropdown'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_0);
    DROPDOWN_AddString(hItem, "UART 0");
    DROPDOWN_AddString(hItem, "UART 1");
    DROPDOWN_AddString(hItem, "UART 2");
    DROPDOWN_AddString(hItem, "UART 3");
    DROPDOWN_SetListHeight(hItem, 60);
		if (pinit == true){
			DROPDOWN_SetSel(WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_0),uartNum);
			
		}
		
    //
    // Initialization of 'Spinbox'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_0);
    SPINBOX_SetFont(hItem, GUI_FONT_13_1);
		SPINBOX_SetRange(hItem,0,230400);
		if (pinit == true){
			SPINBOX_SetValue(hItem,buadrate);
		}
		else 
			SPINBOX_SetValue(hItem,9600);
    //
    // Initialization of 'Text'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
    TEXT_SetText(hItem, "Work With UART");
    TEXT_SetFont(hItem, GUI_FONT_8X16_1);
    TEXT_SetTextColor(hItem, 0x00000080);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_TOP);		
		// Initialization of 'Button'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
    BUTTON_SetText(hItem, "Send Hello World!");
		
		//
    // Initialization of 'Edit'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_0);
    EDIT_SetText(hItem, "in the name Of GOD");
    //
    // Initialization of 'Multiedit'
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_MULTIEDIT_0);
    MULTIEDIT_SetText(hItem, "recive: ");
		
    // USER START (Optionally insert additional code for further widget initialization)
    // USER END
    break;
		
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_DROPDOWN_0: // Notifications sent by 'Dropdown'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:{
			
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;}
			
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_SEL_CHANGED:
							uartNum= DROPDOWN_GetSel(WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_0));
			

						
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_SPINBOX_0: // Notifications sent by 'Spinbox'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_MOVED_OUT:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
				buadrate=SPINBOX_GetValue(WM_GetDialogItem(pMsg->hWin, ID_SPINBOX_0));
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_0: // Notifications sent by 'Connect'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
				pinit=true;
				GUI_MessageBox("connect UART ","Message", GUI_MESSAGEBOX_CF_MOVEABLE);
			
			iuart.set_buadrate(buadrate);
			iuart.set_uartnum(uartNum);
			iuart.printf("Uart Num : %i - Baud rate : %i",uartNum,buadrate);
			
			
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_1: // Notifications sent by 'Disconnect'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
		
		 case ID_BUTTON_2: // Notifications sent by 'Button'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
			iuart.sendstring("Hello World");
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
			
			case ID_EDIT_0: // Notifications sent by 'Edit'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_MULTIEDIT_0: // Notifications sent by 'Multiedit'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_BUTTON_3: // Notifications sent by 'Send'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
				EDIT_GetText(WM_GetDialogItem(pMsg->hWin, ID_EDIT_0),stringS,100);
			iuart.sendstring(stringS);
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
			
			case ID_BUTTON_4: // Notifications sent by 'receive'
      switch(NCode) {

      case WM_NOTIFICATION_CLICKED:{
				
				 GUI_MessageBox("wait for receive Enter Key from UART ",
                  "Message", GUI_MESSAGEBOX_CF_MOVEABLE);
				

				char ch;
				ch=iuart.getchar();
				int i=0;
				for (i=0;ch!=0xD;i++){ // enter
				stringR[i]=ch;
				ch=iuart.getchar();
				iuart.sendchar(ch);
			}
				stringR[i]='\0'; // end of string
				
				MULTIEDIT_SetText(WM_GetDialogItem(pMsg->hWin, ID_MULTIEDIT_0),stringR);
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;}
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
		 // USER START (Optionally insert additional code for further Ids)
    // USER END
		 }
    break;
		
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}


/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateUART
*/
WM_HWIN CreateUART(void);
WM_HWIN CreateUART(void) {
  WM_HWIN hWin;
	
  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
	FRAMEWIN_SetResizeable(hWin,1);
	FRAMEWIN_SetMoveable(hWin,1);
	FRAMEWIN_AddCloseButton(hWin,FRAMEWIN_BUTTON_RIGHT,1);
	FRAMEWIN_AddMaxButton(hWin,FRAMEWIN_BUTTON_RIGHT,1);
	FRAMEWIN_AddMinButton(hWin,FRAMEWIN_BUTTON_RIGHT,1);
	

	
  return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
